public static class ChessboardPoseEstimation
{
    public static void EstimateChessboardPose(
        ref Mat inputImage,
        ref Mat correctedImage,
        ref double roll,
        ref double pitch,
        ref double yaw)
    {
        // 轉換成灰階影像
        Mat gray = new Mat();
        Cv2.CvtColor(inputImage, gray, ColorConversionCodes.BGR2GRAY);

        // 找出棋盤格角點
        Size patternSize = new Size(7, 7); // 假設是6x6的棋盤格(7x7個交叉點)
        Point2f[] corners;
        bool found = Cv2.FindChessboardCorners(gray, patternSize, out corners,
            ChessboardFlags.AdaptiveThresh | ChessboardFlags.NormalizeImage);

        if (!found)
        {
            throw new Exception("無法找到棋盤格角點");
        }

        // 優化角點位置
        Cv2.CornerSubPix(gray, corners, new Size(11, 11), new Size(-1, -1),
            new TermCriteria(CriteriaTypes.Eps | CriteriaTypes.MaxIter, 30, 0.1));

        // 建立理想的棋盤格點位置
        Point2f[] idealPoints = new Point2f[patternSize.Width * patternSize.Height];
        float squareSize = 50.0f;
        for (int i = 0; i < patternSize.Height; i++)
        {
            for (int j = 0; j < patternSize.Width; j++)
            {
                idealPoints[i * patternSize.Width + j] = new Point2f(
                    j * squareSize,
                    i * squareSize
                );
            }
        }

        // 計算透視變換矩陣
        Mat perspectiveMatrix = Cv2.GetPerspectiveTransform(corners, idealPoints);

        // 進行透視校正
        correctedImage = new Mat();
        Cv2.WarpPerspective(inputImage, correctedImage, perspectiveMatrix,
            new Size(patternSize.Width * squareSize, patternSize.Height * squareSize));

        // 提取旋轉角度
        ExtractRotationAngles(perspectiveMatrix, ref roll, ref pitch, ref yaw);

        // 釋放資源
        gray.Dispose();
        perspectiveMatrix.Dispose();
    }

    private static void ExtractRotationAngles(Mat perspectiveMatrix, ref double roll, ref double pitch, ref double yaw)
    {
        // 正規化透視變換矩陣
        double scale = Math.Sqrt(
            perspectiveMatrix.At<double>(2, 0) * perspectiveMatrix.At<double>(2, 0) +
            perspectiveMatrix.At<double>(2, 1) * perspectiveMatrix.At<double>(2, 1) +
            perspectiveMatrix.At<double>(2, 2) * perspectiveMatrix.At<double>(2, 2)
        );

        Mat rotMat = new Mat(3, 3, MatType.CV_64F);
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                rotMat.Set<double>(i, j, perspectiveMatrix.At<double>(i, j) / scale);
            }
        }

        // 計算歐拉角
        roll = Math.Atan2(rotMat.At<double>(2, 1), rotMat.At<double>(2, 2));
        pitch = Math.Atan2(-rotMat.At<double>(2, 0),
            Math.Sqrt(rotMat.At<double>(2, 1) * rotMat.At<double>(2, 1) +
                     rotMat.At<double>(2, 2) * rotMat.At<double>(2, 2)));
        yaw = Math.Atan2(rotMat.At<double>(1, 0), rotMat.At<double>(0, 0));

        // 轉換為角度
        roll = roll * 180.0 / Math.PI;
        pitch = pitch * 180.0 / Math.PI;
        yaw = yaw * 180.0 / Math.PI;

        // 釋放資源
        rotMat.Dispose();
    }

    // 可選：添加額外的變形參數計算方法
    public static void GetDeformationParameters(Mat perspectiveMatrix, 
        ref double scaleX, ref double scaleY, 
        ref double translateX, ref double translateY)
    {
        scaleX = Math.Sqrt(
            perspectiveMatrix.At<double>(0, 0) * perspectiveMatrix.At<double>(0, 0) +
            perspectiveMatrix.At<double>(1, 0) * perspectiveMatrix.At<double>(1, 0)
        );

        scaleY = Math.Sqrt(
            perspectiveMatrix.At<double>(0, 1) * perspectiveMatrix.At<double>(0, 1) +
            perspectiveMatrix.At<double>(1, 1) * perspectiveMatrix.At<double>(1, 1)
        );

        translateX = perspectiveMatrix.At<double>(0, 2);
        translateY = perspectiveMatrix.At<double>(1, 2);
    }
}
